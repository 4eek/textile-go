// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Block_Type int32

const (
	Block_INVITE  Block_Type = 0
	Block_PHOTO   Block_Type = 1
	Block_COMMENT Block_Type = 2
	Block_LIKE    Block_Type = 3
)

var Block_Type_name = map[int32]string{
	0: "INVITE",
	1: "PHOTO",
	2: "COMMENT",
	3: "LIKE",
}
var Block_Type_value = map[string]int32{
	"INVITE":  0,
	"PHOTO":   1,
	"COMMENT": 2,
	"LIKE":    3,
}

func (x Block_Type) String() string {
	return proto.EnumName(Block_Type_name, int32(x))
}
func (Block_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_block_c316f015adf5eb1f, []int{0, 0}
}

type Block struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Target               string               `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Parents              []string             `protobuf:"bytes,3,rep,name=parents,proto3" json:"parents,omitempty"`
	TargetKey            []byte               `protobuf:"bytes,4,opt,name=targetKey,proto3" json:"targetKey,omitempty"`
	ThreadPubKey         string               `protobuf:"bytes,5,opt,name=threadPubKey,proto3" json:"threadPubKey,omitempty"`
	Type                 Block_Type           `protobuf:"varint,6,opt,name=type,proto3,enum=Block_Type" json:"type,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_c316f015adf5eb1f, []int{0}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (dst *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(dst, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Block) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Block) GetParents() []string {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *Block) GetTargetKey() []byte {
	if m != nil {
		return m.TargetKey
	}
	return nil
}

func (m *Block) GetThreadPubKey() string {
	if m != nil {
		return m.ThreadPubKey
	}
	return ""
}

func (m *Block) GetType() Block_Type {
	if m != nil {
		return m.Type
	}
	return Block_INVITE
}

func (m *Block) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

type SignedBlock struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	ThreadId             string   `protobuf:"bytes,4,opt,name=threadId,proto3" json:"threadId,omitempty"`
	ThreadName           string   `protobuf:"bytes,5,opt,name=threadName,proto3" json:"threadName,omitempty"`
	IssuerPubKey         []byte   `protobuf:"bytes,6,opt,name=issuerPubKey,proto3" json:"issuerPubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedBlock) Reset()         { *m = SignedBlock{} }
func (m *SignedBlock) String() string { return proto.CompactTextString(m) }
func (*SignedBlock) ProtoMessage()    {}
func (*SignedBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_c316f015adf5eb1f, []int{1}
}
func (m *SignedBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedBlock.Unmarshal(m, b)
}
func (m *SignedBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedBlock.Marshal(b, m, deterministic)
}
func (dst *SignedBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBlock.Merge(dst, src)
}
func (m *SignedBlock) XXX_Size() int {
	return xxx_messageInfo_SignedBlock.Size(m)
}
func (m *SignedBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBlock.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBlock proto.InternalMessageInfo

func (m *SignedBlock) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SignedBlock) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignedBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedBlock) GetThreadId() string {
	if m != nil {
		return m.ThreadId
	}
	return ""
}

func (m *SignedBlock) GetThreadName() string {
	if m != nil {
		return m.ThreadName
	}
	return ""
}

func (m *SignedBlock) GetIssuerPubKey() []byte {
	if m != nil {
		return m.IssuerPubKey
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "Block")
	proto.RegisterType((*SignedBlock)(nil), "SignedBlock")
	proto.RegisterEnum("Block_Type", Block_Type_name, Block_Type_value)
}

func init() { proto.RegisterFile("block.proto", fileDescriptor_block_c316f015adf5eb1f) }

var fileDescriptor_block_c316f015adf5eb1f = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4e, 0x83, 0x40,
	0x14, 0x85, 0x1d, 0xa0, 0xb4, 0x5c, 0x9a, 0x86, 0xdc, 0x85, 0x99, 0x34, 0xc6, 0x12, 0x56, 0xac,
	0xa6, 0x49, 0xf5, 0x09, 0x6a, 0x9a, 0x48, 0x6a, 0x7f, 0x82, 0xc4, 0x85, 0xbb, 0x41, 0x46, 0x24,
	0xb6, 0x85, 0xc0, 0xb0, 0xe8, 0x6b, 0xf8, 0x22, 0xbe, 0xa2, 0x61, 0x28, 0xd5, 0x26, 0xee, 0x38,
	0x87, 0x73, 0xef, 0xdc, 0xf3, 0x81, 0x1d, 0xef, 0xf2, 0xb7, 0x4f, 0x56, 0x94, 0xb9, 0xcc, 0xc7,
	0x93, 0x34, 0xcf, 0xd3, 0x9d, 0x98, 0x2a, 0x15, 0xd7, 0xef, 0x53, 0x99, 0xed, 0x45, 0x25, 0xf9,
	0xbe, 0x68, 0x03, 0xde, 0x97, 0x06, 0xbd, 0x79, 0x33, 0x80, 0x23, 0xd0, 0xb2, 0x84, 0x12, 0x97,
	0xf8, 0x56, 0xa8, 0x65, 0x09, 0x5e, 0x83, 0x29, 0x79, 0x99, 0x0a, 0x49, 0x35, 0xe5, 0x9d, 0x14,
	0x52, 0xe8, 0x17, 0xbc, 0x14, 0x07, 0x59, 0x51, 0xdd, 0xd5, 0x7d, 0x2b, 0xec, 0x24, 0xde, 0x80,
	0xd5, 0x66, 0x96, 0xe2, 0x48, 0x0d, 0x97, 0xf8, 0xc3, 0xf0, 0xd7, 0x40, 0x0f, 0x86, 0xf2, 0xa3,
	0x14, 0x3c, 0xd9, 0xd6, 0x71, 0x13, 0xe8, 0xa9, 0xad, 0x17, 0x1e, 0x4e, 0xc0, 0x90, 0xc7, 0x42,
	0x50, 0xd3, 0x25, 0xfe, 0x68, 0x66, 0x33, 0x75, 0x19, 0x8b, 0x8e, 0x85, 0x08, 0xd5, 0x0f, 0x64,
	0x60, 0x24, 0x5c, 0x0a, 0xda, 0x77, 0x89, 0x6f, 0xcf, 0xc6, 0xac, 0xad, 0xc7, 0xba, 0x7a, 0x2c,
	0xea, 0xea, 0x85, 0x2a, 0xe7, 0xdd, 0x83, 0xd1, 0x4c, 0x23, 0x80, 0x19, 0xac, 0x5f, 0x82, 0x68,
	0xe1, 0x5c, 0xa1, 0x05, 0xbd, 0xed, 0xe3, 0x26, 0xda, 0x38, 0x04, 0x6d, 0xe8, 0x3f, 0x6c, 0x56,
	0xab, 0xc5, 0x3a, 0x72, 0x34, 0x1c, 0x80, 0xf1, 0x14, 0x2c, 0x17, 0x8e, 0xee, 0x7d, 0x13, 0xb0,
	0x9f, 0xb3, 0xf4, 0x20, 0x92, 0xff, 0xd1, 0xa0, 0xba, 0x82, 0x2b, 0x30, 0x43, 0xf5, 0x12, 0x6f,
	0xca, 0x57, 0x59, 0x7a, 0xe0, 0xb2, 0x2e, 0x05, 0xd5, 0xdb, 0xf2, 0x67, 0x03, 0xc7, 0x30, 0x68,
	0x8b, 0x06, 0x89, 0x22, 0x63, 0x85, 0x67, 0x8d, 0xb7, 0x00, 0xed, 0xf7, 0x9a, 0xef, 0xc5, 0x09,
	0xcb, 0x1f, 0xa7, 0x01, 0x97, 0x55, 0x55, 0x2d, 0xca, 0x13, 0x38, 0x53, 0x2d, 0xbf, 0xf0, 0xe6,
	0xc6, 0xab, 0x56, 0xc4, 0xb1, 0xa9, 0x38, 0xdc, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x90, 0xb8,
	0x07, 0xa4, 0x03, 0x02, 0x00, 0x00,
}
